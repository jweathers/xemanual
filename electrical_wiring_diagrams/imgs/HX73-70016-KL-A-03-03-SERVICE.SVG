<svg contentScriptType="text/ecmascript" zoomAndPan="disable" xmlns:xlink="http://www.w3.org/1999/xlink" baseProfile="full" onload="ewd.init(evt)" contentStyleType="text/css" id="iewd-svg" version="1.1" width="100%" preserveAspectRatio="xMinYMin meet" viewBox="0 0 10500 7250" height="100%" xmlns="http://www.w3.org/2000/svg">






<rect width="31500.0" x="-10500.0" id="dragbox" height="21750.0" y="-7250.0" class="drag-box"/><g style="font-family: Arial;" id="ewdmatrix" transform="matrix(1 0 0 1 0 0)"><title></title><desc>Symca Ltd CGM-SVG processor - Format Ver3.02 - Created: 20-Jul-18  11:08am - using EDS-Designer: 16.98  (info@symca.com)</desc><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C20A&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C20A" xlink:actuate="onRequest" id="C20A-7" xlink:show="replace"><text x="8446.000" font-size="60.5" id="INLINE_LH_C20A_0016" y="2350.000" style="text-anchor: end; fill: #0000ff;">C20A-7</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C20B&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C20B" xlink:actuate="onRequest" id="C20B-7" xlink:show="replace"><text x="8481.000" font-size="60.5" id="INLINE_RH_C20B_0016" y="2350.000" style="text-anchor: start; fill: #0000ff;">C20B-7</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C20A&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C20A" xlink:actuate="onRequest" id="C20A-8" xlink:show="replace"><text x="8446.000" font-size="60.5" id="INLINE_LH_C20A_0017" y="2535.000" style="text-anchor: end; fill: #0000ff;">C20A-8</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C20B&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C20B" xlink:actuate="onRequest" id="C20B-8" xlink:show="replace"><text x="8481.000" font-size="60.5" id="INLINE_RH_C20B_0017" y="2535.000" style="text-anchor: start; fill: #0000ff;">C20B-8</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C2DB04AB&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C2DB04AB" xlink:actuate="onRequest" id="C2DB04AB-6" xlink:show="replace"><text x="1375.000" font-size="60.5" id="DEVCONN_C2DB04AB_0018" y="3036.000" style="text-anchor: middle; fill: #0000ff;">C2DB04AB-6</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C2DB04AB&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C2DB04AB" xlink:actuate="onRequest" id="C2DB04AB-14" xlink:show="replace"><text x="1401.000" font-size="60.5" id="DEVCONN_C2DB04AB_0020" y="3194.000" style="text-anchor: middle; fill: #0000ff;">C2DB04AB-14</text></a><a cursor="pointer" onclick="window.parent.showSpliceCrossReferences(&apos;SP7621&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="SP7621" xlink:actuate="onRequest" id="SP7621" xlink:show="replace"><text x="3352.000" font-size="60.5" id="SPLICE_SP7621_0022" y="3194.000" style="text-anchor: middle; fill: #0000ff;">SP7621</text></a><a cursor="pointer" onclick="window.parent.showSpliceCrossReferences(&apos;SP7619&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="SP7619" xlink:actuate="onRequest" id="SP7619" xlink:show="replace"><text x="3668.000" font-size="60.5" id="SPLICE_SP7619_0023" y="3036.000" style="text-anchor: middle; fill: #0000ff;">SP7619</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C2MC01A&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C2MC01A" xlink:actuate="onRequest" id="C2MC01A-21" xlink:show="replace"><text x="1375.000" font-size="60.5" id="DEVCONN_C2MC01A_0024" y="2350.000" style="text-anchor: middle; fill: #0000ff;">C2MC01A-21</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;C2MC01A&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="C2MC01A" xlink:actuate="onRequest" id="C2MC01A-5" xlink:show="replace"><text x="1375.000" font-size="60.5" id="DEVCONN_C2MC01A_0026" y="2535.000" style="text-anchor: middle; fill: #0000ff;">C2MC01A-5</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;CHE010&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="CHE010" xlink:actuate="onRequest" id="CHE010-14" xlink:show="replace"><text x="6278.000" font-size="60.5" id="DEVCONN_CHE010_0028" y="3589.000" style="text-anchor: middle; fill: #0000ff;">CHE010-14</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;CHE010&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="CHE010" xlink:actuate="onRequest" id="CHE010-7" xlink:show="replace"><text x="6278.000" font-size="60.5" id="DEVCONN_CHE010_0029" y="3405.000" style="text-anchor: middle; fill: #0000ff;">CHE010-7</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;CHE010&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="CHE010" xlink:actuate="onRequest" id="CHE010-13" xlink:show="replace"><text x="7016.000" font-size="60.5" id="DEVCONN_CHE010_0030" y="3589.000" style="text-anchor: middle; fill: #0000ff;">CHE010-13</text></a><a cursor="pointer" onclick="window.parent.showERLSelector(&apos;CHE010&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="CHE010" xlink:actuate="onRequest" id="CHE010-6" xlink:show="replace"><text x="7016.000" font-size="60.5" id="DEVCONN_CHE010_0031" y="3405.000" style="text-anchor: middle; fill: #0000ff;">CHE010-6</text></a><a cursor="pointer" onclick="window.parent.showSpliceCrossReferences(&apos;SP7618&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="SP7618" xlink:actuate="onRequest" id="SP7618" xlink:show="replace"><text x="5935.000" font-size="60.5" id="SPLICE_SP7618_0032" y="2350.000" style="text-anchor: middle; fill: #0000ff;">SP7618</text></a><a cursor="pointer" onclick="window.parent.showSpliceCrossReferences(&apos;SP7631&apos;)" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:type="simple" class="SP7631" xlink:actuate="onRequest" id="SP7631" xlink:show="replace"><text x="6304.000" font-size="60.5" id="SPLICE_SP7631_0033" y="2535.000" style="text-anchor: middle; fill: #0000ff;">SP7631</text></a><g style="font-family: Arial Unicode MS, Arial;" id="EDS_CIRCUIT_GROUP">

<text fill="silver" x="405.000" font-size="30.000" id="EDS_CCT_PARTNUM" y="2011.000" style="font-family: Arial Unicode MS, Arial;">HX73-70016-KL-A-03-03-Service (X760-17MY-JOB1P90)<title>HX73-70016-KL-A-03-03-Service (X760-17MY-JOB1P90)</title></text>

<text fill="gray" x="8797.000" font-size="20" id="EDS_CCT_BOTTOM_RIGHT_MARKER" y="3847.000" style="font-family: Arial Unicode MS, Arial;">x</text>

<polyline style="fill: none; stroke: #1DB200; stroke-width: 34;" points="1191 2403,5914 2403"/>
<polyline style="fill: none; stroke: #FF8000; stroke-width: 13;" points="1191 2403,5914 2403"/>
<text x="1900.000" font-size="60.5" id="WIRE_NA_0003" y="2350.000">GN-OG,  0.35,  375<title>VDB25KM</title></text>
<polyline style="fill: none; stroke: #ADADAD; stroke-width: 34;" points="1191 2588,6283 2588"/>
<polyline style="fill: none; stroke: #0000CF; stroke-width: 13;" points="1191 2588,6283 2588"/>
<text x="1900.000" font-size="60.5" id="WIRE_NA_0004" y="2535.000">GY-BU,  0.35,  375<title>VDB26KM</title></text>
<polyline style="fill: none; stroke: #1DB200; stroke-width: 34;" points="3695 3088,5935 3088,5935 2424"/>
<polyline style="fill: none; stroke: #FF8000; stroke-width: 13;" points="3695 3088,5935 3088,5935 2424"/>
<text x="4219.000" font-size="60.5" id="WIRE_NA_0005" y="3036.000">GN-OG,  0.13,  535<title>VDB25KL</title></text>
<polyline style="fill: none; stroke: #ADADAD; stroke-width: 34;" points="3379 3247,6304 3247,6304 2609"/>
<polyline style="fill: none; stroke: #0000CF; stroke-width: 13;" points="3379 3247,6304 3247,6304 2609"/>
<text x="4219.000" font-size="60.5" id="WIRE_NA_0006" y="3194.000">GY-BU,  0.13,  535<title>VDB26KL</title></text>
<polyline style="fill: none; stroke: #1DB200; stroke-width: 34;" points="3668 3115,3668 3458,4696 3458,6436 3458"/>
<polyline style="fill: none; stroke: #FF8000; stroke-width: 13;" points="3668 3115,3668 3458,4696 3458,6436 3458"/>
<text x="4219.000" font-size="60.5" id="WIRE_NA_0007" y="3379.000">GN-OG,  0.22,  360<title>VDB25KN</title></text>
<polyline style="fill: none; stroke: #ADADAD; stroke-width: 34;" points="3352 3273,3352 3642,6436 3642"/>
<polyline style="fill: none; stroke: #0000CF; stroke-width: 13;" points="3352 3273,3352 3642,6436 3642"/>
<text x="4219.000" font-size="60.5" id="WIRE_NA_0008" y="3589.000">GY-BU,  0.22,  360<title>VDB26KN</title></text>
<polyline style="fill: none; stroke: #ADADAD; stroke-width: 34;" points="1191 3247,3326 3247"/>
<polyline style="fill: none; stroke: #0000CF; stroke-width: 13;" points="1191 3247,3326 3247"/>
<text x="1768.000" font-size="60.5" id="WIRE_NA_0009" y="3194.000">GY-BU,  0.35,  220<title>VDB26KG</title></text>
<polyline style="fill: none; stroke: #1DB200; stroke-width: 34;" points="1191 3088,3642 3088"/>
<polyline style="fill: none; stroke: #FF8000; stroke-width: 13;" points="1191 3088,3642 3088"/>
<text x="1768.000" font-size="60.5" id="WIRE_NA_0010" y="3036.000">GN-OG,  0.35,  220<title>VDB25KG</title></text>
<polyline style="fill: none; stroke: #000000; stroke-width: 6;" points="6613 3458,6805 3458"/>
<polyline style="fill: none; stroke: #000000; stroke-width: 6;" points="6718 3642,6805 3642"/>
<polyline style="fill: none; stroke: #000000; stroke-width: 6;" points="6489 3642,6681 3642"/>
<polyline style="fill: none; stroke: #000000; stroke-width: 6;" points="6489 3458,6576 3458"/>
<polyline style="fill: none; stroke: #ADADAD; stroke-width: 34;" points="6325 2588,8407 2588"/>
<polyline style="fill: none; stroke: #0000CF; stroke-width: 13;" points="6325 2588,8407 2588"/>
<text x="6565.000" font-size="60.5" id="WIRE_NA_0011" y="2535.000">GY-BU,  0.35,  1010<title>VDB26KD</title></text>
<polyline style="fill: none; stroke: #1DB200; stroke-width: 34;" points="5956 2403,8407 2403"/>
<polyline style="fill: none; stroke: #FF8000; stroke-width: 13;" points="5956 2403,8407 2403"/>
<text x="6565.000" font-size="60.5" id="WIRE_NA_0012" y="2350.000">GN-OG,  0.35,  1010<title>VDB25KD</title></text>
<polygon style="fill: none;stroke-dasharray:100 50; stroke: #000000; stroke-width: 13;" points="505 3352,505 2983,1138 2983,1138 3352"/>
<text x="490.000" font-size="81.6" id="COMPSL_V100_0013" y="2957.000" style="font-weight: bold;">Diagnostic connector<title>Diagnostic connector</title></text>
<polygon style="fill: none;stroke-dasharray:100 50; stroke: #000000; stroke-width: 13;" points="505 2693,505 2271,1138 2271,1138 2693"/>
<text x="490.000" font-size="81.6" id="COMPSL_D107_0014" y="2245.000" style="font-weight: bold;">Instrument cluster<title>Instrument cluster</title></text>
<polygon style="fill: none;stroke-dasharray:100 50; stroke: #000000; stroke-width: 13;" points="6489 3747,6489 3352,6805 3352,6805 3747"/>
<text font-size="81.6" id="COMPML_K109_0015" y="3244.400" style="font-weight: bold;">
	<title>Header-Connector</title>
	<tspan x="6474.000" dy="0">Header-</tspan>
	<tspan x="6474.000" dy="81.600">Connector</tspan>
</text>
<polyline style="fill: none; stroke: #000000; stroke-width: 4;" points="8512 2403,8492 2403"/>
<polyline style="fill: none; stroke: #000000; stroke-width: 4;" points="8420 2403,8440 2403"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M8475,2438 A35,35 0 0,1 8475,2368"/>
<circle r="17" style="fill: none; stroke: #000000; stroke-width: 4;" cx="8475" cy="2403"/>


<polyline style="fill: none; stroke: #000000; stroke-width: 4;" points="8512 2588,8492 2588"/>
<polyline style="fill: none; stroke: #000000; stroke-width: 4;" points="8420 2588,8440 2588"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M8475,2623 A35,35 0 0,1 8475,2553"/>
<circle r="17" style="fill: none; stroke: #000000; stroke-width: 4;" cx="8475" cy="2588"/>


<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="1164" cy="3088"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M1164,3114 A26,26 0 0,0 1164,3062"/>

<text x="821.000" font-size="55.0" id="TXT_NA_0019" y="3088.000" style="text-anchor: middle;">HS CAN H (PT)</text>
<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="1164" cy="3247"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M1164,3273 A26,26 0 0,0 1164,3221"/>

<text x="821.000" font-size="55.0" id="TXT_NA_0021" y="3247.000" style="text-anchor: middle;">HS CAN L (PT)</text>
<circle r="26" style="fill: #000000;; stroke: #000000; stroke-width: 4;" cx="3352" cy="3247"/>

<circle r="26" style="fill: #000000;; stroke: #000000; stroke-width: 4;" cx="3668" cy="3088"/>

<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="1164" cy="2403"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M1164,2429 A26,26 0 0,0 1164,2377"/>

<text x="821.000" font-size="55.0" id="TXT_NA_0025" y="2403.000" style="text-anchor: middle;">HS CAN H (PT)</text>
<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="1164" cy="2588"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M1164,2614 A26,26 0 0,0 1164,2562"/>

<text x="821.000" font-size="55.0" id="TXT_NA_0027" y="2588.000" style="text-anchor: middle;">HS CAN L (PT)</text>
<circle r="18" style="fill: #000000;; stroke: #000000; stroke-width: 4;" cx="6700" cy="3642"/>
<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="6463" cy="3642"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M6463,3668 A26,26 0 0,1 6463,3616"/>

<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="6463" cy="3458"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M6463,3484 A26,26 0 0,1 6463,3432"/>

<circle r="18" style="fill: #000000;; stroke: #000000; stroke-width: 4;" cx="6594" cy="3458"/>
<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="6832" cy="3642"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M6832,3668 A26,26 0 0,0 6832,3616"/>

<circle r="13" style="fill: none; stroke: #000000; stroke-width: 4;" cx="6832" cy="3458"/>
<path style="fill: none; stroke: #000000; stroke-width: 4;" d="M6832,3484 A26,26 0 0,0 6832,3432"/>

<circle r="21" style="fill: #000000;; stroke: #000000; stroke-width: 4;" cx="5935" cy="2403"/>

<circle r="21" style="fill: #000000;; stroke: #000000; stroke-width: 4;" cx="6304" cy="2588"/>

<circle r="7" style="fill: none; stroke: #000000; stroke-width: 4;" cx="8413" cy="2588"/>
<circle r="7" style="fill: none; stroke: #000000; stroke-width: 4;" cx="8519" cy="2588"/>
<circle r="7" style="fill: none; stroke: #000000; stroke-width: 4;" cx="8413" cy="2403"/>
<circle r="7" style="fill: none; stroke: #000000; stroke-width: 4;" cx="8519" cy="2403"/>

</g><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 2403,5914 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 2403,5914 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 2588,6283 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 2588,6283 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 3088,3642 3088" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 3088,3642 3088" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 3247,3326 3247" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="1191 3247,3326 3247" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="5956 2403,8407 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="5956 2403,8407 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6325 2588,8407 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6325 2588,8407 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6489 3458,6576 3458" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6489 3458,6576 3458" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6613 3458,6805 3458" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6613 3458,6805 3458" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6489 3642,6681 3642" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6489 3642,6681 3642" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6718 3642,6805 3642" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 6; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="6718 3642,6805 3642" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8420 2403,8440 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8420 2403,8440 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8512 2403,8492 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8512 2403,8492 2403" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8420 2588,8440 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8420 2588,8440 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8512 2588,8492 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 4; stroke: #ff0000" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="8512 2588,8492 2588" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3352 3273,3352 3642,6436 3642" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3352 3273,3352 3642,6436 3642" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3379 3247,6304 3247,6304 2609" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #a19e42" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3379 3247,6304 3247,6304 2609" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3695 3088,5935 3088,5935 2424" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3695 3088,5935 3088,5935 2424" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3668 3115,3668 3458,4696 3458,6436 3458" opacity="0"/><polyline onmouseout="evt.target.setAttribute(&apos;opacity&apos;, &apos;0&apos;)" style="stroke-dashoffset: 100;fill: none; stroke-dasharray: 100; stroke-width: 34; stroke: #6c67d9" onmouseover="evt.target.setAttribute(&apos;opacity&apos;, &apos;1&apos;)" points="3668 3115,3668 3458,4696 3458,6436 3458" opacity="0"/></g><script type="text/javascript"><![CDATA[/* jshint es3:true */
// Ensure that if undefined has been re-assigned by some other function, this will not adversely affect our code.
(function(undefined) {
    var root = this;
    var ewd = root.ewd = {};
    var ewdMatrix, dragBox, staticContent, viewBox, electricalWiringDiagram;
    var DOUBLE_CLICK_DELAY = 700, mouseClicks = 0, mouseClickResetTimer;

    // The percentage width the electrical wiring diagram should default to.
    var ewdDefaultZoom = 0.99;

    // The transformation matrix used to manipulate the electrical wiring
    // diagram.
    var transMatrix = [ 1, 0, 0, 1, 0, 0 ];

    // The current coordinates of the user's pointer.
    var currentX = 0, currentY = 0;

    // Called by the SVG when loaded on its own.
    ewd.init = function(evt) {
        var svgDoc;
        if (window.svgDocument === undefined) {
            svgDoc = evt.target.ownerDocument;
        } else {
            svgDoc = window.svgDocument;
        }
        try {
            // try to stop it by appending an empty handler
            svgDoc.oncontextmenu = ewd.nullEvent;
        } catch (e) {
            // ASV doesn't support this event
        }
        ewdMatrix = svgDoc.getElementById("ewdmatrix");
        dragBox = svgDoc.getElementById("dragbox");
        dragBox.addEventListener('mousedown', ewd.selectElement, false);
        staticContent = svgDoc.getElementById("static-content");
        electricalWiringDiagram = evt.target;
        viewBox = evt.target.getAttributeNS(null, "viewBox").split(" ");
        ewd.focusOnElement(ewdMatrix, ewdDefaultZoom);
        ewd.highlightSearchTerm(urlParam("searchTerm"), true);
        svgDoc.rootElement.addEventListener('keydown', ewd.keyboardPanning, false);
    };

    ewd.updateClientCoords = function(clientX, clientY) {
        currentX = clientX;
        currentY = clientY;
    };

    ewd.nullEvent = function(evt) {
        if (evt.preventDefault) {
            evt.preventDefault();
        }
        if (evt.stopPropagation) {
            evt.stopPropagation();
        }
    };

    ewd.keyboardPanning = function(evt) {
        if (!evt) {
            evt = window.event;
        }
        var code = evt.keyCode;
        if (evt.charCode && code === 0) {
            code = evt.charCode;
        }
        switch (code) {
        case 37:
            ewd.pan(200, 0);
            break;
        case 38:
            ewd.pan(0, 200);
            break;
        case 39:
            ewd.pan(-200, 0);
            break;
        case 40:
            ewd.pan(0, -200);
            break;
        }
        evt.preventDefault();
    };

    // Place a bounding highlighting rectangle behind elements with an class that
    // matches the given searchTerm and scale the viewport to surround the first
    // match if zoomToMatch is set.
    ewd.highlightSearchTerm = function(searchTerm, zoomToMatch) {
        if (searchTerm) {
            ewd.removeAllHighlights();
            var matchingElements = electricalWiringDiagram.getElementsByTagNameNS("http://www.w3.org/2000/svg", "a"), i, len;
            var smallestXCoordinate = Number.MAX_VALUE, smallestYCoordinate = Number.MAX_VALUE, largestXCoordinate = 0, largestYCoordinate = 0;
            var hasMatchingElements = false;
            for (i = 0, len = matchingElements.length; i < len; i++) {
                var matchingElement = matchingElements.item(i);
                if (matchingElement.getAttributeNS(null, "class") == searchTerm) {
                    hasMatchingElements = true;
                    var matchingElementBoundingBox = matchingElement.getBBox();

                    if (smallestXCoordinate === 0 || smallestXCoordinate > matchingElementBoundingBox.x) {
                        smallestXCoordinate = matchingElementBoundingBox.x;
                    }
                    if (smallestYCoordinate === 0 || smallestYCoordinate > matchingElementBoundingBox.y) {
                        smallestYCoordinate = matchingElementBoundingBox.y;
                    }
                    if (largestXCoordinate === 0 || largestXCoordinate < matchingElementBoundingBox.x) {
                        largestXCoordinate = matchingElementBoundingBox.x + matchingElementBoundingBox.width;
                    }
                    if (largestYCoordinate === 0 || largestYCoordinate < matchingElementBoundingBox.y) {
                        largestYCoordinate = matchingElementBoundingBox.y + matchingElementBoundingBox.height;
                    }
                    var highlightRectangle = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                    highlightRectangle.setAttribute("x", matchingElementBoundingBox.x);
                    highlightRectangle.setAttribute("y", matchingElementBoundingBox.y);
                    highlightRectangle.setAttribute("width", matchingElementBoundingBox.width);
                    highlightRectangle.setAttribute("height", matchingElementBoundingBox.height);
                    highlightRectangle.setAttribute("class", "highlight");
                    // Ensure the highlight rectangle sits behind the highlighted
                    // element.
                    ewdMatrix.insertBefore(highlightRectangle, matchingElement);
                }
            }

            var focusRectangle = document.createElementNS("http://www.w3.org/2000/svg", "rect");
            focusRectangle.setAttribute("x", smallestXCoordinate);
            focusRectangle.setAttribute("y", smallestYCoordinate);
            focusRectangle.setAttribute("width", largestXCoordinate - smallestXCoordinate);
            focusRectangle.setAttribute("height", largestYCoordinate - smallestYCoordinate);

            ewdMatrix.appendChild(focusRectangle);
            if (zoomToMatch && hasMatchingElements) {
                // Focus on the rectangle formed around all the matching elements.
                ewd.focusOnElement(focusRectangle, (1 / 6));
                zoomToMatch = false;
            }
            ewdMatrix.removeChild(focusRectangle);
        }
    };

    // Find all highlight rectangles within the SVG and remove them.
    ewd.removeAllHighlights = function() {
        var matchingElements = electricalWiringDiagram.getElementsByTagNameNS("http://www.w3.org/2000/svg", "rect"), i, len;
        var highlights = [];
        // Identify highlight rectangles and store them in a non-transitive array.
        for (i = 0, len = matchingElements.length; i < len; i++) {
            var rectangle = matchingElements.item(i);
            if (rectangle.getAttributeNS(null, "class") == "highlight") {
                highlights.push(rectangle);
            }
        }
        // Remove the previously identified highlight rectangles.
        for (i = 0, len = highlights.length; i < len; i++) {
            ewdMatrix.removeChild(highlights[i]);
        }
    };

    // Move and zoom the EWD to focus on the given element.
    ewd.focusOnElement = function(element, percentageWidth) {
        var elementBoundingBox = element.getBBox();
        // Reset zoom level.
        transMatrix[0] = 1;
        transMatrix[3] = 1;
        // Move the element to the centre of the viewport.
        transMatrix[4] = (parseFloat(viewBox[2]) / 2) - (elementBoundingBox.x + (elementBoundingBox.width / 2));
        transMatrix[5] = (parseFloat(viewBox[3]) / 2) - (elementBoundingBox.y + (elementBoundingBox.height / 2));
        // Scale the element such that it takes up the given percentage width of the viewport.

        var width = elementBoundingBox.width + elementBoundingBox.x;
        var height = elementBoundingBox.height + elementBoundingBox.y;

        var scale = 0;
        if (height > width) {
            scale = (parseFloat(viewBox[3]) * percentageWidth) / elementBoundingBox.height;
        } else {
            scale = (parseFloat(viewBox[2]) * percentageWidth) / elementBoundingBox.width;
        }
        // Reset zoom if the script wants to zoom out too far.
        if (scale > 0.99 ) {
            ewd.zoom(scale);
        } else {
            ewd.reset();
        }
    };

    // Move the viewport by the given x and y coordinate distances.
    ewd.pan = function(dx, dy) {
        transMatrix[4] += dx;
        transMatrix[5] += dy;
        updateMatrix();
    };

    // Reset the EWD view to the default zoom level.
    ewd.reset = function() {
        ewd.focusOnElement(ewdMatrix, ewdDefaultZoom);
    };

    // Zoom in towards the centre of the viewport by the given scale.
    ewd.zoom = function(scale) {
        scaleTransformationMatrix(scale);
        transMatrix[4] += (1 - scale) * (parseFloat(viewBox[2]) / 2);
        transMatrix[5] += (1 - scale) * (parseFloat(viewBox[3]) / 2);
        updateMatrix();
    };

    // Zoom in towards the centre of the pinch (as best we can calculate) relative to the rate at which the user is pinching.
    ewd.pinchZoom = function(originalScale, dx, dy, scale) {
        // Update the zoom level based on the original scale at which the pinch started.
        transMatrix[0] = parseFloat(originalScale) * scale;
        transMatrix[3] = parseFloat(originalScale) * scale;
        // Zoom from the given client coordinates.
        var elementBoundingBox = ewdMatrix.getBBox();
        transMatrix[4] = parseFloat(dx) + ((1 - scale) * (calculateTranslationXFactor(elementBoundingBox.width, currentX) * parseFloat(originalScale)));
        transMatrix[5] = parseFloat(dy) + ((1 - scale) * (calculateTranslationYFactor(elementBoundingBox.height, currentY) * parseFloat(originalScale)));
        // Apply the updates to the view.
        updateMatrix();
    };

    // Called when the user mouseClicks on the EWD to move it.
    ewd.selectElement = function(evt) {
        ewd.updateClientCoords(evt.clientX, evt.clientY);

        // Bring the background drag box to the front.
        electricalWiringDiagram.appendChild(dragBox);

        // Bind mouse movement to control the EWD viewport.
        evt.target.addEventListener('mousemove', ewd.moveElement, false);

        // Ensure the drag box is ready for use again when mouse is release.
        evt.target.addEventListener('mouseout', ewd.deselectElement, false);
        evt.target.addEventListener('mouseup', ewd.deselectElement, false);
    };

    // Called when the user moves the EWD.
    ewd.moveElement = function(evt) {
        // Convert the user's mouse coordinates into EWD coordinates.
        var dx = calculateTranslationXFactor(parseFloat(viewBox[2]), (evt.clientX - currentX));
        var dy = calculateTranslationYFactor(parseFloat(viewBox[3]), (evt.clientY - currentY));

        // Pan the view in scale with user's mouse movement.
        ewd.pan(dx, dy);

        // Record the user's new mouse position.
        ewd.updateClientCoords(evt.clientX, evt.clientY);
    };

    // Called when the user releases the mouse after moving the EWD.
    ewd.deselectElement = function(evt) {
        // Ready the drag box to be used again.
        evt.target.removeEventListener('mousemove', ewd.moveElement, false);
        evt.target.removeEventListener('mouseout', ewd.deselectElement, false);
        evt.target.removeEventListener('mouseup', ewd.deselectElement, false);

        // Shuffle the elements back into their default order.
        electricalWiringDiagram.appendChild(ewdMatrix);
        electricalWiringDiagram.appendChild(staticContent);

        // Handle the fact this might be the end of a double click event.
        return parseClickEvent(evt);
    };

    // Resets the number of recorded consecutive mouse mouseClicks.
    ewd.resetMouseClickCount = function() {
        mouseClicks = 0;
    };

    // Add a log message into the SVG - should not be used within production
    // SVGs.
    ewd.log = function(message) {
        var messageElement = document.createElementNS("http://www.w3.org/2000/svg", 'text');
        messageElement.setAttribute("id", "logmessage");
        messageElement.setAttribute("x", "20");
        messageElement.setAttribute("y", "20");
        messageElement.setAttribute("font-size", "36");
        messageElement.appendChild(document.createTextNode(message));
        if (electricalWiringDiagram.getElementById('logmessage') === null) {
            electricalWiringDiagram.appendChild(messageElement);
        } else {
            electricalWiringDiagram.replaceChild(messageElement, electricalWiringDiagram.getElementById('logmessage'));
        }
    };

    // Update the EWD viewport zoom and position.
    function updateMatrix() {
        var newMatrix = "matrix(" + transMatrix.join(' ') + ")";
        ewdMatrix.setAttributeNS(null, "transform", newMatrix);
    }

    // Work out whether the click event represents a double or single click and
    // adjust the zoom accordingly.
    function parseClickEvent(evt) {
        mouseClicks++;
        if (mouseClicks === 1) {
            // This is a single click, set a timeout to reset the count after a
            // delay.
            // WONTFIX the implied eval() is required to work with the IE8 Adobe
            // SVG Viewer plugin.
            mouseClickResetTimer = setTimeout("ewd.resetMouseClickCount();", DOUBLE_CLICK_DELAY);
        } else {
            // This is at least a double click, stop the timeout from resetting the
            // mouse click count.
            clearTimeout(mouseClickResetTimer);
            // Handle the double click of a left or right mouse button.
            switch (evt.button) {
            case 0:
                zoomToPoint(1.2, evt.clientX, evt.clientY);
                break;
            case 2:
                zoomToPoint(0.8, evt.clientX, evt.clientY);
                break;
            }
            // Now we've dealt with the click event, reset the mouse click count.
            ewd.resetMouseClickCount();
        }
    }

    // Zoom in towards a given point on the viewport by the given scale.
    function zoomToPoint(scale, clientX, clientY) {
        scaleTransformationMatrix(scale);
        // Move the viewport to the client coordinates.
        transMatrix[4] += (1 - scale) * calculateTranslationXFactor(parseFloat(viewBox[2]), clientX);
        transMatrix[5] += (1 - scale) * calculateTranslationYFactor(parseFloat(viewBox[3]), clientY);
        updateMatrix();
    }

    // Scale the transformation matrix.
    function scaleTransformationMatrix(scale) {
        var matrixPosition;
        for (matrixPosition in transMatrix) {
            if (transMatrix.hasOwnProperty(matrixPosition)) {
                transMatrix[matrixPosition] *= scale;
            }
        }
    }

    // Return the distance required to translate the x-axis in the SVG scale.
    function calculateTranslationXFactor(viewBoxX, clientX) {
        var translationXFactor = clientX * (viewBoxX / window.innerWidth);
        if (window.document.getElementById('electrical-wiring-diagram') !== null) {
            translationXFactor = clientX * (viewBoxX / window.parent.document.getElementById('electrical-wiring-diagram').offsetWidth);
        }
        return translationXFactor;
    }

    // Return the distance required to translate the y-axis in the SVG scale.
    function calculateTranslationYFactor(viewBoxY, clientY) {
        var translationYFactor = clientY * (viewBoxY / window.innerHeight);
        if (window.document.getElementById('electrical-wiring-diagram') !== null) {
            translationYFactor = clientY * (viewBoxY / window.parent.document.getElementById('electrical-wiring-diagram').offsetHeight);
        }
        return translationYFactor;
    }

    // Return the first value of the given parameter from the URL or null if the
    // parameter is not set.
    function urlParam(parameter) {
        var parameters = new RegExp('[\\?&]' + parameter + '=([^&#]*)').exec(window.parent.location.href);
        return parameters !== null ? (parameters[1] || null) : null;
    }
})();
]]></script><g id="static-content"><text x="1.0" font-size="54.288002" id="headerText" y="55.288002" class="headerText">418-00 - MODULE COMMUNICATIONS NETWORK --- EJLR 02 08 21_1E - XE iEWD (LHD) (1a) --- (3 / 3)</text><g id="navigation" transform="translate(10080.0,6452.5) scale(2.2424924)"><filter xlink:actuate="onLoad" xlink:type="simple" height="120%" id="dropshadow" xlink:show="other" xmlns:xlink="http://www.w3.org/1999/xlink"><feOffset dx="0" dy="1" result="offOut" in="SourceGraphic"/><feColorMatrix values="0.298039 0 0 0 0 0 0.298039 0 0 0 0 0 0.298039 0 0 0 0 0 1 0" type="matrix" result="matrixOut" in="offOut"/><feGaussianBlur stdDeviation="5" result="blurOut" in="matrixOut"/><feBlend mode="normal" in2="blurOut" in="SourceGraphic"/></filter><g style="cursor: pointer;" onclick="ewd.reset()"><rect width="100.0" x="0.0" height="100.0" y="0.0" class="button-tray"/><path fill="#666666" d="M1536 1280v-448q0 -26 -19 -45t-45 -19h-448q-42 0 -59 40q-17 39 14 69l138 138q-148 137 -349 137q-104 0 -198.5 -40.5t-163.5 -109.5t-109.5 -163.5t-40.5 -198.5t40.5 -198.5t109.5 -163.5t163.5 -109.5t198.5 -40.5q169 0 304 99.5t185 261.5q7 23 30 23h199 q16 0 25 -12q10 -13 7 -27q-39 -175 -147.5 -312t-266 -213t-336.5 -76q-156 0 -298 61t-245 164t-164 245t-61 298t61 298t164 245t245 164t298 61q147 0 284.5 -55.5t244.5 -156.5l130 129q29 31 70 14q39 -17 39 -59z" onmouseout="evt.target.setAttribute(&apos;fill&apos;, &apos;#666666&apos;);" class="" onmouseover="evt.target.setAttribute(&apos;fill&apos;, &apos;#000000&apos;);" transform="translate(83, 76) scale(0.04) rotate(-180)"/></g><rect width="100.0" x="0.0" height="200.0" y="133.0" class="button-tray"/><g style="cursor: pointer;" onclick="ewd.zoom(1.2)"><rect width="100.0" x="0.0" height="100.0" y="133.0" class="button"/><path fill="#666666" d="M25 180 h20 v-20 h10 v20 h20 v10 h-20 v20 h-10 v-20 h-20Z" onmouseout="evt.target.setAttribute(&apos;fill&apos;, &apos;#666666&apos;);" class="" onmouseover="evt.target.setAttribute(&apos;fill&apos;, &apos;#000000&apos;);"/></g><g style="cursor: pointer;" onclick="ewd.zoom(0.8)"><rect width="100.0" x="0.0" height="100.0" y="233.0" class="button"/><path fill="#666666" d="M25 280 h50 v10 h-50Z" onmouseout="evt.target.setAttribute(&apos;fill&apos;, &apos;#666666&apos;);" class="" onmouseover="evt.target.setAttribute(&apos;fill&apos;, &apos;#000000&apos;);"/></g><line y2="233.0" x1="15.0" x2="85.0" class="separator" y1="233.0"/></g></g><style type="text/css">    .button-tray{ stroke: #EEEEEE; fill: #FFFFFF; filter:url(#dropshadow); }
    .button{ stroke: none; fill: #FFFFFF; }
    .separator{ stroke: #DCDCDC; stroke-width: 3; }
    .drag-box{ pointer-events: fill; fill: none; stroke: none; }
    .highlight{ fill: #FFFF00; stroke: none; }
    .headerText{ display: none; fill: #000000; font-family: sans-serif }
    #EDS_CCT_PARTNUM{display: none;}
    #EDS_CCT_BOTTOM_RIGHT_MARKER{display: none;}
    @media print {#navigation {display: none;} #EDS_CCT_PARTNUM,.headerText{display: inline;}}
</style><script type="text/javascript"><![CDATA[var originalScale, originalDx, originalDy, draggableElement = document.getElementById('dragbox'), iewdSvg = document
                .getElementById('iewd-svg'), pointers = [];

if (window.navigator.msPointerEnabled) {
    // Specifies whether and how a given region can be manipulated by the user (for instance, by panning or zooming).
    iewdSvg.style.touchAction = "none";

    var msGesture = new MSGesture();
    msGesture.target = iewdSvg;

    draggableElement.addEventListener("pointerdown", msPointerDown, false);
    draggableElement.addEventListener("pointerup", msPointerUp, false);
    iewdSvg.addEventListener("MSGestureChange", msGestureChange, false);
}

// Prevent touch events triggering on the EWD itself.
iewdSvg.addEventListener('touchmove', function(e) {
    e.preventDefault();
}, false);

// Configure reactions to touch events on the dragbox.
draggableElement.addEventListener('touchstart', startTouch, false);
draggableElement.addEventListener('touchmove', moveEvent, false);
draggableElement.addEventListener('gesturestart', gestureStart, false);
draggableElement.addEventListener('gesturechange', gestureChange, false);

// When the pointer has lifted from the device, clear all current pointers.
function msPointerUp(e) {
    pointers = [];
}

// Triggered when there is physical contact with the device.
// Separate events are fired for each touch point. We keep track of these in the pointers array to determine how many touches
// have occurred. After the pointer has lifted, we clear the pointers array.
function msPointerDown(e) {
    if (e.preventManipulation) {
            e.preventManipulation();
    }

    pointers.push([e.clientX, e.clientY]);

    if (pointers.length == 1) {
        ewd.updateClientCoords(pointers[0], pointers[1]);
    } else if (pointers.length == 2) {
        ewd.updateClientCoords((pointers[0][0] + pointers[1][0]) / 2,
                        (pointers[0][1] + pointers[1][1]) / 2);
    }

    if (e.type == "pointerdown") {
        msGesture.addPointer(e.pointerId);
        return;
    }
}

// Triggered when the finger positions associated with the interaction moves on the screen.
// It will also be triggered during inertia processing.
function msGestureChange(e) {
    if (e.scale !== 0) {
        setOriginalMeasurements();
        ewd.pinchZoom(originalScale, originalDx, originalDy, e.scale);
    }
}

// When the user touches the EWD, record their coordinates.
function startTouch(e) {
    e.preventDefault();
    if (e.touches.length == 1) {
        ewd.updateClientCoords(e.changedTouches[0].clientX, e.changedTouches[0].clientY);
    }
    if (e.touches.length == 2) {
        ewd.updateClientCoords((e.changedTouches[0].clientX + e.changedTouches[1].clientX) / 2,
                        (e.changedTouches[0].clientY + e.changedTouches[1].clientY) / 2);
    }
}

// If the user is dragging using one finger, move the element using the touch event.
function moveEvent(e) {
    e.preventDefault();

    if (e.touches.length == 1) {
        ewd.moveElement(e.changedTouches[0]);
    }
}

// Record the existing scale and x and y shifts before the user starts to pinch.
function gestureStart(e) {
    e.preventDefault();
    setOriginalMeasurements();
}

// If the user is pinching using two fingers, adjust the zoom accordingly.
function gestureChange(e) {
    ewd.pinchZoom(originalScale, originalDx, originalDy, e.scale);
}

function setOriginalMeasurements() {
    var transformAttribute = document.getElementById("ewdmatrix").getAttributeNS(null, "transform");
    if (transformAttribute !== '') {
        originalScale = transformAttribute.split(" ")[0].split("(")[1];
        originalDx = transformAttribute.split(" ")[4];
        originalDy = transformAttribute.split(" ")[5].split(")")[0];
    }
}
]]></script></svg>